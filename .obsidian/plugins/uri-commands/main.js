/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const ICON_LIST = ['activity', 'airplay', 'alarm-check', 'alarm-clock-off', 'alarm-clock', 'alarm-minus', 'alarm-plus', 'album', 'alert-circle', 'alert-octagon', 'alert-triangle', 'align-left', 'align-right', 'align-center', 'align-justify', 'anchor', 'aperture', 'archive', 'arrow-big-down', 'arrow-big-left', 'arrow-big-right', 'arrow-big-up', 'arrow-down-circle', 'arrow-down-left', 'arrow-down-right', 'arrow-down', 'arrow-left-circle', 'arrow-left-right', 'arrow-left', 'arrow-right-circle', 'arrow-right', 'arrow-up-circle', 'arrow-up-left', 'arrow-up-right', 'arrow-up', 'asterisk', 'at-sign', 'award', 'axe', 'banknote', 'bar-chart-2', 'bar-chart', 'battery-charging', 'battery-full', 'battery-low', 'battery-medium', 'battery', 'beaker', 'bell-minus', 'bell-off', 'bell-plus', 'bell-ring', 'bell', 'bike', 'binary', 'bitcoin', 'bluetooth-connected', 'bluetooth-off', 'bluetooth-searching', 'bluetooth', 'bold', 'book-open', 'book', 'bookmark-minus', 'bookmark-plus', 'bookmark', 'bot', 'box-select', 'box', 'briefcase', 'brush', 'bug', 'building', 'bus', 'calculator', 'calendar', 'camera-off', 'camera', 'car', 'carrot', 'cast', 'check-circle-2', 'check-circle', 'check-square', 'check', 'chevron-down', 'chevron-first', 'chevron-last', 'chevron-left', 'chevron-right', 'chevron-up', 'chevrons-down-up', 'chevrons-down', 'chevrons-left', 'chevrons-right', 'chevrons-up-down', 'chevrons-up', 'chrome', 'circle-slashed', 'circle', 'clipboard-check', 'clipboard-copy', 'clipboard-list', 'clipboard-x', 'clipboard', 'clock-1', 'clock-10', 'clock-11', 'clock-12', 'clock-2', 'clock-3', 'clock-4', 'clock-5', 'clock-6', 'clock-7', 'clock-8', 'clock-9', 'clock', 'cloud-drizzle', 'cloud-fog', 'cloud-hail', 'cloud-lightning', 'cloud-moon', 'cloud-off', 'cloud-rain-wind', 'cloud-rain', 'cloud-snow', 'cloud-sun', 'cloud', 'cloudy', 'clover', 'code-2', 'code', 'codepen', 'codesandbox', 'coffee', 'coins', 'columns', 'command', 'compass', 'contact', 'contrast', 'cookie', 'copy', 'copyleft', 'copyright', 'corner-down-left', 'corner-down-right', 'corner-left-down', 'corner-left-up', 'corner-right-down', 'corner-right-up', 'corner-up-left', 'corner-up-right', 'cpu', 'credit-card', 'crop', 'cross', 'crosshair', 'crown', 'currency', 'database', 'delete', 'dice', 'disc', 'divide-circle', 'divide-square', 'divide', 'dollar-sign', 'download-cloud', 'download', 'dribbble', 'droplet', 'droplets', 'drumstick', 'edit-2', 'edit-3', 'edit', 'egg', 'equal-not', 'equal', 'eraser', 'euro', 'expand', 'external-link', 'eye-off', 'eye', 'facebook', 'fast-forward', 'feather', 'figma', 'file-check-2', 'file-check', 'file-code', 'file-digit', 'file-input', 'file-minus-2', 'file-minus', 'file-output', 'file-plus-2', 'file-plus', 'file-search', 'file-text', 'file-x-2', 'file-x', 'file', 'files', 'film', 'filter', 'flag-triangle-left', 'flag-triangle-right', 'flag', 'flame', 'flashlight-off', 'flashlight', 'flask-conical', 'flask-round', 'folder-minus', 'folder-open', 'folder-plus', 'folder', 'form-input', 'forward', 'framer', 'frown', 'function-square', 'gamepad-2', 'gamepad', 'gauge', 'gavel', 'gem', 'ghost', 'gift', 'git-branch-plus', 'git-branch', 'git-commit', 'git-merge', 'git-pull-request', 'github', 'gitlab', 'glasses', 'globe-2', 'globe', 'grab', 'graduation-cap', 'grid', 'grip-horizontal', 'grip-vertical', 'hammer', 'hand-metal', 'hand', 'hard-drive', 'hard-hat', 'hash', 'haze', 'headphones', 'heart', 'help-circle', 'hexagon', 'highlighter', 'history', 'home', 'image-minus', 'image-off', 'image-plus', 'image', 'import', 'inbox', 'indent', 'indian-rupee', 'infinity', 'info', 'inspect', 'instagram', 'italic', 'japanese-yen', 'key', 'landmark', 'languages', 'laptop-2', 'laptop', 'lasso-select', 'lasso', 'layers', 'layout-dashboard', 'layout-grid', 'layout-list', 'layout-template', 'layout', 'library', 'life-buoy', 'lightbulb-off', 'lightbulb', 'link-2-off', 'link-2', 'link', 'linkedin', 'list-checks', 'list-minus', 'list-ordered', 'list-plus', 'list-x', 'list', 'loader-2', 'loader', 'locate-fixed', 'locate', 'lock', 'log-in', 'log-out', 'mail', 'map-pin', 'map', 'maximize-2', 'maximize', 'megaphone', 'meh', 'message-circle', 'message-square', 'mic-off', 'mic', 'minimize-2', 'minimize', 'minus-circle', 'minus-square', 'minus', 'monitor-off', 'monitor-speaker', 'monitor', 'moon', 'more-horizontal', 'more-vertical', 'mountain-snow', 'mountain', 'mouse-pointer-2', 'mouse-pointer-click', 'mouse-pointer', 'move-diagonal-2', 'move-diagonal', 'move-horizontal', 'move-vertical', 'move', 'music', 'navigation-2', 'navigation', 'network', 'octagon', 'option', 'outdent', 'package-check', 'package-minus', 'package-plus', 'package-search', 'package-x', 'package', 'palette', 'paperclip', 'pause-circle', 'pause-octagon', 'pause', 'pen-tool', 'pencil', 'percent', 'person-standing', 'phone-call', 'phone-forwarded', 'phone-incoming', 'phone-missed', 'phone-off', 'phone-outgoing', 'phone', 'pie-chart', 'piggy-bank', 'pin', 'pipette', 'plane', 'play-circle', 'play', 'plug-zap', 'plus-circle', 'plus-square', 'plus', 'pocket', 'podcast', 'pointer', 'pound-sterling', 'power-off', 'power', 'printer', 'qr-code', 'quote', 'radio-receiver', 'radio', 'redo', 'refresh-ccw', 'refresh-cw', 'regex', 'repeat-1', 'repeat', 'reply-all', 'reply', 'rewind', 'rocking-chair', 'rotate-ccw', 'rotate-cw', 'rss', 'ruler', 'russian-ruble', 'save', 'scale', 'scan-line', 'scan', 'scissors', 'screen-share-off', 'screen-share', 'search', 'send', 'separator-horizontal', 'separator-vertical', 'server-crash', 'server-off', 'server', 'settings-2', 'settings', 'share-2', 'share', 'sheet', 'shield-alert', 'shield-check', 'shield-close', 'shield-off', 'shield', 'shirt', 'shopping-bag', 'shopping-cart', 'shovel', 'shrink', 'shuffle', 'sidebar-close', 'sidebar-open', 'sidebar', 'sigma', 'signal-high', 'signal-low', 'signal-medium', 'signal-zero', 'signal', 'skip-back', 'skip-forward', 'skull', 'slack', 'slash', 'sliders', 'smartphone-charging', 'smartphone', 'smile', 'snowflake', 'sort-asc', 'sort-desc', 'speaker', 'sprout', 'square', 'star-half', 'star', 'stop-circle', 'strikethrough', 'subscript', 'sun', 'sunrise', 'sunset', 'superscript', 'swiss-franc', 'switch-camera', 'table', 'tablet', 'target', 'tent', 'terminal-square', 'terminal', 'text-cursor-input', 'text-cursor', 'thermometer-snowflake', 'thermometer-sun', 'thermometer', 'thumbs-down', 'thumbs-up', 'ticket', 'timer-off', 'timer-reset', 'timer', 'toggle-left', 'toggle-right', 'tornado', 'trash-2', 'trash', 'trello', 'trending-down', 'trending-up', 'triangle', 'truck', 'tv-2', 'tv', 'twitch', 'twitter', 'type', 'umbrella', 'underline', 'undo', 'unlink-2', 'unlink', 'unlock', 'upload-cloud', 'upload', 'user-check', 'user-minus', 'user-plus', 'user-x', 'user', 'users', 'verified', 'vibrate', 'video-off', 'video', 'view', 'voicemail', 'volume-1', 'volume-2', 'volume-x', 'volume', 'wallet', 'wand', 'watch', 'webcam', 'wifi-off', 'wifi', 'wind', 'wrap-text', 'wrench', 'x-circle', 'x-octagon', 'x-square', 'x', 'youtube', 'zap-off', 'zap', 'zoom-in', 'zoom-out', 'lucide-clock', 'lucide-cloud', 'lucide-cross', 'lucide-folder', 'lucide-info', 'lucide-languages', 'lucide-link', 'lucide-pencil', 'lucide-pin', 'lucide-search', 'lucide-star', 'lucide-trash'];

//From https://github.com/phibr0/obsidian-macros/blob/a56fb9a7259564a9345e0d1ed0af4331f4dba104/src/ui/iconPicker.ts#L4
class IconPicker extends obsidian.FuzzySuggestModal {
    constructor(plugin, command, modal) {
        super(plugin.app);
        this.plugin = plugin;
        this.command = command;
        this.modal = modal;
        this.setPlaceholder("Pick an icon");
    }
    cap(string) {
        const words = string.split(" ");
        return words.map((word) => {
            return word[0].toUpperCase() + word.substring(1);
        }).join(" ");
    }
    getItems() {
        return ICON_LIST;
    }
    getItemText(item) {
        return this.cap(item.replace(/-/ig, " "));
    }
    renderSuggestion(item, el) {
        el.addClass("URI-icon-container");
        const div = createDiv({ cls: "URI-icon" });
        el.appendChild(div);
        obsidian.setIcon(div, item.item);
        super.renderSuggestion(item, el);
    }
    onChooseItem(item) {
        this.command.icon = item;
        this.modal.display();
        this.close();
    }
}

class URIModal extends obsidian.Modal {
    constructor(plugin, settingTab, command = null, editMode = false) {
        super(plugin.app);
        this.settingTab = settingTab;
        this.plugin = plugin;
        this.editMode = editMode;
        if (command === null) {
            this.uriCommand = {
                name: "",
                id: "",
                URITemplate: "",
                encode: true,
            };
        }
        else {
            this.uriCommand = command;
        }
    }
    onOpen() {
        this.display();
    }
    display() {
        let { contentEl } = this;
        contentEl.empty();
        new obsidian.Setting(contentEl)
            .setName("Command name")
            .addText((textEl) => {
            textEl.setValue(this.uriCommand.name)
                .onChange((value) => {
                this.uriCommand.name = value;
            });
        });
        new obsidian.Setting(contentEl)
            .setName("URI")
            .setDesc("Accepts {{fileName}}, {{fileText}}, {{selection}}, {{line}}, {{filePath}}, {{vaultName}} and {{meta:FIELD_NAME}} placeholders.")
            .addText((textEl) => {
            textEl.setValue(this.uriCommand.URITemplate)
                .onChange((value) => {
                this.uriCommand.URITemplate = value;
            });
        });
        //heavily borrowing https://github.com/phibr0/obsidian-macros/blob/master/src/ui/macroModal.ts#L66
        new obsidian.Setting(contentEl)
            .setName("Add icon")
            .setDesc("Optional")
            .addButton(button => {
            if (this.uriCommand.icon) { //button looks like the existing icon
                button.setIcon(this.uriCommand.icon);
            }
            else { //or if no existing icon
                button.setButtonText("Pick icon");
            }
            button.onClick(() => {
                new IconPicker(this.plugin, this.uriCommand, this).open();
            });
        });
        new obsidian.Setting(contentEl)
            .setName("URL-encode input")
            .setDesc("Automatically URL-encode any user input text. Should only be off if content is already encoded or itself a URI scheme (e.g.. a bare URL with https://).")
            .addToggle(toggle => {
            toggle.setValue(this.uriCommand.encode)
                .onChange(value => {
                this.uriCommand.encode = value;
            });
        });
        //https://github.com/phibr0/obsidian-macros/blob/master/src/ui/macroModal.ts#L132
        const buttonDiv = contentEl.createDiv({ cls: "URI-flex-center" });
        const saveButton = createEl("button", { text: "Save command" });
        buttonDiv.appendChild(saveButton);
        saveButton.onClickEvent(() => __awaiter(this, void 0, void 0, function* () {
            if (this.editMode === false) { //creating a new command
                //replace spaces with - and add unix millisec timestamp (to ensure uniqueness)
                this.uriCommand.id = this.uriCommand.name.trim().replace(" ", "-").toLowerCase() + obsidian.moment().valueOf();
                this.plugin.settings.URICommands.push(this.uriCommand);
                this.plugin.addURICommand(this.uriCommand);
            }
            else { //remove and readd command, works around forcing the user to reload the entire app
                this.app.commands.removeCommand(`${this.plugin.manifest.id}:${this.uriCommand.id}`);
                this.plugin.addURICommand(this.uriCommand);
            }
            yield this.plugin.saveSettings();
            this.settingTab.display(); //refresh settings tab
            this.close();
        }));
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}

const DEFAULT_SETTINGS = {
    URICommands: [],
    notification: false,
};
//borrowed in part from phibr0's Customizable Sidebar plugin
class URISettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Commands' });
        new obsidian.Setting(containerEl)
            .setName("Add URI")
            .setDesc("Add a new URI to the command palette")
            .addButton((button) => {
            button.setButtonText("Add Command")
                .onClick(() => {
                new URIModal(this.plugin, this).open();
            });
        });
        this.plugin.settings.URICommands.forEach(command => {
            if (command === null) { //this should *not* happen
                this.plugin.settings.URICommands.remove(command);
                console.log("Command was null, removing.");
                return;
            }
            let iconDiv;
            if (command.icon) { //do want the "if null or empty string or undefined or etc" behavior
                iconDiv = createDiv({ cls: "URI-settings-icon" });
                obsidian.setIcon(iconDiv, command.icon, 20);
            }
            const setting = new obsidian.Setting(containerEl)
                .setName(command.name)
                .setDesc(command.URITemplate)
                .addExtraButton(button => {
                button.setIcon("trash")
                    .setTooltip("Remove command")
                    .onClick(() => __awaiter(this, void 0, void 0, function* () {
                    // Unregister the command from the palette
                    this.app.commands.removeCommand(`${this.plugin.manifest.id}:${command.id}`);
                    this.plugin.settings.URICommands.remove(command);
                    yield this.plugin.saveSettings();
                    this.display();
                }));
            })
                .addExtraButton(button => {
                button.setIcon("gear")
                    .setTooltip("Edit command")
                    .onClick(() => {
                    new URIModal(this.plugin, this, command, true).open();
                });
            });
            if (command.icon) {
                setting.nameEl.prepend(iconDiv);
            }
            setting.nameEl.addClass("URI-flex");
        });
        containerEl.createEl('h2', { text: 'Settings' });
        new obsidian.Setting(containerEl)
            .setName("Notification on launch")
            .setDesc("Display a notification with the command URI on launch.")
            .addToggle(toggle => {
            toggle.setValue(this.plugin.settings.notification)
                .onChange(value => {
                this.plugin.settings.notification = value;
                this.plugin.saveSettings();
            });
        });
    }
}

const SELECTION_TEMPLATE = "{{selection}}";
const FILE_TEXT_TEMPLATE = "{{fileText}}";
const FILE_NAME_TEMPLATE = "{{fileName}}";
const LINE_TEMPLATE = "{{line}}";
const FILE_PATH_TEMPLATE = "{{filePath}}";
const VAULT_NAME_TEMPLATE = "{{vaultName}}";
const METADATA_REGEX = /{{meta:([^}]*)}}/; //note that this will *not* match if the metadata name has a } in it
const editorTemplates = [SELECTION_TEMPLATE, LINE_TEMPLATE]; // templates that require an editor to extract
const fileTemplates = [FILE_NAME_TEMPLATE, FILE_TEXT_TEMPLATE, FILE_PATH_TEMPLATE]; // templates that require an active file (but not an editor)
class URIPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Loading URI commands...');
            yield this.loadSettings();
            this.addSettingTab(new URISettingTab(this.app, this));
            this.addCommands();
        });
    }
    onunload() {
        console.log('Unloading URI commands');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    addCommands() {
        this.settings.URICommands.forEach(command => {
            this.addURICommand(command);
        });
    }
    addURICommand(command) {
        this.addCommand({
            id: command.id,
            name: command.name,
            icon: command.icon,
            checkCallback: (check) => {
                const view = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                const file = this.app.workspace.getActiveFile();
                const editor = view === null || view === void 0 ? void 0 : view.editor;
                if (!editor) { //don't show commands that require an editor
                    const uriContainsEditorTemplates = editorTemplates.some(template => command.URITemplate.includes(template)); //https://stackoverflow.com/a/66980203
                    if (uriContainsEditorTemplates)
                        return false;
                }
                if (!file) { // don't show commands that require a file
                    const uriContainsFileTemplates = fileTemplates.some(template => command.URITemplate.includes(template));
                    if (uriContainsFileTemplates || METADATA_REGEX.test(command.URITemplate))
                        return false;
                }
                else if (file.extension !== "md") { // don't show commands that require a markdown file
                    if (command.URITemplate.includes(FILE_TEXT_TEMPLATE))
                        return false;
                }
                if (!check)
                    this.runCommand(command, editor, file);
                return true;
            }
        });
    }
    runCommand(command, editor, file) {
        return __awaiter(this, void 0, void 0, function* () {
            let uriString = command.URITemplate;
            if (METADATA_REGEX.test(uriString)) { //specified metadata values
                //checks if you can use metadata placeholder
                if (!this.app.plugins.plugins["metaedit"].api) {
                    new obsidian.Notice("Must have MetaEdit enabled to use metadata placeholders");
                    return;
                }
                //@ts-ignore
                const { getPropertyValue } = this.app.plugins.plugins["metaedit"].api;
                //for every instance of the placeholder: extract the name of the field, get the corresponding value, and replace the placeholder with the encoded value
                //https://stackoverflow.com/questions/432493/how-do-you-access-the-matched-groups-in-a-javascript-regular-expression
                let metadataMatch = METADATA_REGEX.exec(uriString); //grab a matched group, where match[0] is the full regex and match [1] is the (first) group
                while (metadataMatch !== null) { //loop through all the matched until exec() isn't spitting out any more
                    let metadataValue = yield getPropertyValue(metadataMatch[1], file);
                    if (!metadataValue) { //if this value doesn't exist on the file
                        new obsidian.Notice(`The field ${metadataMatch[1]} does not exist on this file.`);
                        return;
                    }
                    uriString = replacePlaceholder(command, uriString, metadataMatch[0], metadataValue);
                    metadataMatch = METADATA_REGEX.exec(uriString);
                }
            }
            if (uriString.includes(FILE_NAME_TEMPLATE)) { // base name of file
                uriString = replacePlaceholder(command, uriString, FILE_NAME_TEMPLATE, file.basename);
            }
            if (uriString.includes(FILE_TEXT_TEMPLATE)) { //entire text of file
                const fileText = yield this.app.vault.read(file);
                return replacePlaceholder(command, uriString, FILE_TEXT_TEMPLATE, fileText);
            }
            if (uriString.includes(SELECTION_TEMPLATE)) { //current selection
                uriString = replacePlaceholder(command, uriString, SELECTION_TEMPLATE, editor.getSelection()); //currently replaced with empty string if no selection
            }
            if (uriString.includes(LINE_TEMPLATE)) { //current line
                const currentLine = editor.getCursor().line;
                uriString = replacePlaceholder(command, uriString, LINE_TEMPLATE, editor.getLine(currentLine));
            }
            if (uriString.includes(FILE_PATH_TEMPLATE)) { //path inside the vault to the current file
                uriString = replacePlaceholder(command, uriString, FILE_PATH_TEMPLATE, file.path);
            }
            if (uriString.includes(VAULT_NAME_TEMPLATE)) { //name of the current vault
                uriString = replacePlaceholder(command, uriString, VAULT_NAME_TEMPLATE, this.app.vault.getName());
            }
            window.open(uriString);
            if (this.settings.notification === true) {
                new obsidian.Notice(`Opening ${uriString}`);
            }
        });
    }
}
function replacePlaceholder(command, uriString, placeholder, replacementString) {
    if (command.encode) {
        replacementString = encodeURIComponent(replacementString);
    }
    return uriString.replace(placeholder, replacementString);
}

module.exports = URIPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
